{"version":3,"sources":["js/2023-11-09.js"],"names":["document","addEventListener","objArray","Object","keys","newNameObject","console","log","objArrayValues","values","objectArrayKeyValues","entries","arrayObject","fromEntries"],"mappings":"AAAA,YAAY;;AAEZA,QAAQ,CAACC,gBAAgB,CAAC,kBAAkB,EAAE,YAAW;EAEzD;;EAGA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;;EAEA;EACA;EACA;;EAEA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAGA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;;EAEA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACI;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAGA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAGA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAGA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;;EAGA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAGA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;;EAEA;EACA;;EAEA;EACA;;EAIA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAGA;;EAEA;;EAGA;EACA;EACA,IAAMC,QAAQ,GAAGC,MAAM,CAACC,IAAI,CAACC,aAAa,CAAC;EAC3CC,OAAO,CAACC,GAAG,CAACL,QAAQ,CAAC;;EAErB;EACA;;EAEA,IAAMM,cAAc,GAAGL,MAAM,CAACM,MAAM,CAACJ,aAAa,CAAC;EACnDC,OAAO,CAACC,GAAG,CAACC,cAAc,CAAC;;EAE3B;EACA;;EAEA,IAAME,oBAAoB,GAAGP,MAAM,CAACQ,OAAO,CAACN,aAAa,CAAC;EAC1DC,OAAO,CAACC,GAAG,CAACG,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;EAE1C;EACA;;EAEA,IAAME,WAAW,GAAGT,MAAM,CAACU,WAAW,CAACH,oBAAoB,CAAC;EAC5DJ,OAAO,CAACC,GAAG,CAACK,WAAW,CAAC;AAG5B,CAAC,CAAC","file":"2023-11-09.26580843.js","sourceRoot":"..","sourcesContent":["'use strict';\r\n\r\ndocument.addEventListener('DOMContentLoaded', function() {\r\n\r\n// --- 위로 삭제 금지~ ---\r\n\r\n    \r\n// 16. 이벤트 활용\r\n// - 어떤 이벤트를 어떻게 사용할지를 먼저 기획해야 한다.\r\n// - 서버와 연동해서 사용하려면 node.js를 사용해야 한다.\r\n// - node.js 자체가 서버는 아니다.\r\n// - 여러분은 결국 next.js를 사용할 수밖에 없을 것이다.\r\n// - next.js는 react의 프레임워크이다.\r\n\r\n// 16-1 이벤트 모델\r\n// - 이벤트를 연결하는 방법\r\n// - addEvevtListener() -> 사용하는 것을 표준 이벤트 모델\r\n// - onKeyup 등의 이벤트를 사용하는 것을 고전 이벤트 모델\r\n// - on으로 시작하는 속성을 HTML 요소에 사용하는 형식 즉 인라인 이벤트 모델 \r\n\r\n// 16-2 키보드 이벤트 \r\n// - 키보드의 값을 입력 받아 그 결과를 숫자로 반환\r\n// - keydown : 키가 눌릴 때, 누르고 있을 때, 입력할 때\r\n// - keyup : 키보드에서 키가 떨어질 때(많이 사용)\r\n// - keypress : 키가 입력될 때, 아시아권 문자(조합 문자) 입력시 오류\r\n\r\n// const h1El = document.querySelector('h1');\r\n// const textArea = document.querySelector('textarea');\r\n\r\n// textArea.addEventListener('keypress', (event) => {\r\n//     console.log(event);\r\n//     console.log(event.keypress);\r\n\r\n//     const length = textArea.value.length;\r\n//     h1El.textContent = `입력된 글자 수: ${length}`;\r\n// });\r\n\r\n// code -> 입력한 키\r\n// keyCode -> 입력한 키를 나타내는 숫자 \r\n// altKey\r\n// ctrlKey\r\n// shiftKey\r\n\r\n// function print(event) {\r\n//     let output = '';\r\n//     output += `alt : ${event.altKey}<br/>`;\r\n//     output += `ctrl : ${event.ctrlKey}<br/>`;\r\n//     output += `shift : ${event.shiftKey}<br/>`;\r\n//     output += `code : ${typeof(event.code) !== 'undefined' ? event.code : event.keyCode}`;\r\n// }\r\n\r\n// document.addEventListener('keydown', print);\r\n// document.addEventListener('keyup', print);\r\n\r\n// 키로 특정 문자열 출력\r\n// - 이처럼 키보드 이벤트를 처리할 때는 switch문을 활용하는 경우가 많다.\r\n\r\n// const h1Star = document.querySelector('.star');\r\n// h1Star.style.position = 'absolute';\r\n\r\n// let [x, y] = [0,0];\r\n// const block = 20;\r\n// const print = () => {\r\n//     h1Star.style.left = `${x * block}px`;\r\n//     h1Star.style.top = `${y * block}px`;\r\n// }\r\n// print();\r\n\r\n// // 별을 이동시키는 기능\r\n// const [left, up, right, down] = [37,38,39,40];\r\n// document.body.addEventListener('keydown', (event) => {\r\n//     console.log(event.keyCode);\r\n\r\n//     switch (event.keyCode) {\r\n//         case left : x -= 1;\r\n//         break;\r\n\r\n//         case left : y -= 1;\r\n//         break;\r\n\r\n//         case left : x += 1;\r\n//         break;\r\n\r\n//         case left : y += 1;\r\n//         break;\r\n//     }\r\n//     print();\r\n// })\r\n\r\n// 16-3. 글자 입력 양식 이벤트\r\n// html -> input, button, textarea, select...\r\n\r\n// 입력 양식을 활용해서 inch를 cm단위로 변환하는 프로그램\r\n\r\n// const inputEl = document.querySelector('input')\r\n// const btnEl = document.querySelector('button')\r\n// const spanEl = document.querySelector('span')\r\n\r\n// console.log(inputEl, btnEl, spanEl);\r\n\r\n// btnEl.addEventListener('click', () => {\r\n//     const inch = Number(inputEl.value);\r\n\r\n//     if (isNaN(inch)) {\r\n//         spanEl.textContent = '숫자를 입력해주세요!';\r\n//         return; \r\n//     }\r\n\r\n//     const cm = inch * 2.54;\r\n//     spanEl.textContent = `${cm}cm이빈다`\r\n//     spanEl.style = 'color : red; font-size : 20px';\r\n// });\r\n\r\n\r\n// // 이메일 형식 유효성 검사\r\n// const emailEl = document.querySelector('.text');\r\n// const stateEl = document.querySelector('.state');\r\n\r\n// console.log(emailEl, stateEl)\r\n\r\n// const isEmail = (value) => {\r\n//     return (value.indexOf('@') > 1) && (value.split('@')[1].indexOf('.' > 1));\r\n// }\r\n\r\n// emailEl.addEventListener('keyup', function(event) {\r\n//     const value = event.currentTarget.value;\r\n//     const value1 = this.value;\r\n//     console.log(value1);\r\n\r\n//     if (isEmail(value)) {\r\n//         stateEl.textContent = `이메일 형식입니다. ${value}`;\r\n//     } else {\r\n//         stateEl.textContent = `이메일 형식이 아닙니다. ${value}`;\r\n\r\n//     }\r\n// })\r\n\r\n// 드롭다운 목록 활용(select)\r\n// \r\n\r\n// const selectEl = document.querySelector('select');\r\n// const spanEl = document.querySelector('span');\r\n\r\n// console.log(selectEl, spanEl);\r\n\r\n// selectEl.addEventListener('change', (event) => {\r\n//     const optionEl = event.currentTarget.options;\r\n//     console.log(optionEl);\r\n//     const index = event.currentTarget.options.selectedindex;\r\n//     console.log(index);\r\n\r\n//     spanEl.textContent = optionEl[index].textContent;\r\n// });\r\n\r\n// 드롭다운 여러 개의 목록 선택 (select)\r\n    // selectEl.addEventListener('change', (event) => {\r\n    //     const optionEl = event.currentTarget.options;\r\n    //     const list = [];\r\n    // })\r\n\r\n    // // 선택이 반복되는 작업\r\n    // for (const option of optionEl) {\r\n\r\n    //     if(option.selected) {\r\n    //         list.push(option.textContent);\r\n    //     }\r\n    // }\r\n    // spanEl.textContent = list.join(',');\r\n\r\n    // cm를 여러 개의 단위로 변환하는 프로그램\r\n    // mm, m, \r\n\r\n    // let nowNumber = 0;\r\n    // let editNumber = 10;\r\n\r\n    // const selectEl = document.querySelector('select');\r\n    // const inputEl = document.querySelector('[type=text]');\r\n    // const spanEl = document.querySelector('p span');\r\n\r\n    // console.log(selectEl, inputEl, spanEl);\r\n\r\n    // const calculate = () => {\r\n    //     spanEl.textContent = (nowNumber * editNumber).toFixed(2);\r\n    // };\r\n\r\n    // selectEl.addEventListener('change', (e) => {\r\n    //     // event.target은 부모로부터 이벤트가 위임되어 발생하는 자식의 위치, 내가 선택한 요소 \r\n    //     // currentTarget은 이벤트가 부착된 요소\r\n\r\n    //     const optionEl = e.currentTarget.options;\r\n    //     const idx = e.currentTarget.options.selectedIndex;\r\n\r\n    //     // 항목을 선택 -> value값을 추출\r\n    //     editNumber = Number(optionEl[idx].value);\r\n    //     calculate();\r\n\r\n    //     inputEl.addEventListener('keyup', (e) => {\r\n    //         nowNumber = Number(e.currentTarget.value);\r\n    //         calculate();\r\n    //     })\r\n    // })\r\n\r\n    // let [timer, timeId]  = [0, 0];\r\n    // const h1El = document.querySelector('h1');\r\n    // const chkEl = document.querySelector('input');\r\n\r\n    // chkEl.addEventListener('change', (event) => {\r\n    //     // console.log(event);\r\n    //     if(event.currentTarget.checked) {\r\n    //         console.log('checked!!');\r\n    //         // 체크상태\r\n    //         timeId = setInterval(() => {\r\n    //             timer += 1;\r\n    //             h1El.textContent = `${timer}초`\r\n    //         }, 1000)\r\n    //     } else {\r\n    //         console.log('is not checked!!');\r\n    //         clearInterval(timeId);\r\n    //     }\r\n    // })\r\n    \r\n    // const spanYear = document.querySelector('address span');\r\n    // spanYear.textContent = new Date().getFullYear();\r\n\r\n\r\n    // class student {\r\n    //     constructor(name, age) {\r\n    //         this.name = name;\r\n    //         this.age = age;\r\n    //         this.methods = () => {\r\n    //             console.log(this.name, this.age);\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    // const output = document.querySelector('#output');\r\n    // const radios = document.querySelectorAll('[name=get]');\r\n    // console.log(output, radios);\r\n\r\n    // radios.forEach((radio) => {\r\n    //     radio.addEventListener('change', (event) => {\r\n    //         const current = event.currentTarget;\r\n    //         if (current.checked) {\r\n    //             output.textContent = `좋아하는 애완동물은? ${current.value}`; \r\n    //         }\r\n    //     })\r\n    // });\r\n\r\n    // const imgs = document.querySelectorAll('img');\r\n    // console.log(imgs);\r\n\r\n    // imgs.forEach((img) => {\r\n    //     img.addEventListener('contextmenu', (event) => {\r\n    //         event.preventDefault();\r\n    //     });\r\n    // });\r\n\r\n    // const aTag = document.querySelector('a');\r\n    // aTag.addEventListener('click', (event) => {\r\n    //     event.preventDefault();\r\n    //     this.location.href = 'http://naver.com';\r\n    // })\r\n\r\n    // let state = false;\r\n    // const checkBox = document.querySelector('[type=checkbox]');\r\n    // console.log(checkBox);\r\n\r\n    // checkBox.addEventListener('change', (event) => {\r\n    //     state = event.currentTarget.checked;\r\n    //     console.log(state);\r\n    // });\r\n\r\n    // const link = document.querySelector('a');\r\n    // link.addEventListener('click', (e) => {\r\n    //     if(state) {\r\n    //         e.preventDefault();\r\n    //     }\r\n    // });\r\n\r\n\r\n    // sessionStorage\r\n    // localStorage\r\n    // - 웹 브라우저에서 기본적으로 제공하는 객체\r\n    // - 사용데이터를 저장\r\n    // - localStorage.getItem(키) : 저장된 값 추출, 없으면 undefined\r\n    // - localStorage.setItem(키, 값) : 값을 저장\r\n    // - localStorage.removItem(키) : 특정 키의 값을 제거\r\n    // - localStorage.clear() : 저장된 모든 값 제거\r\n\r\n\r\n    // const pEl = document.querySelector('p');\r\n    // const inputEl = document.querySelector('input');\r\n    // const btnEl = document.querySelector('button');\r\n\r\n    // const savedValue = localStorage.getItem('input');\r\n\r\n    // if (savedValue) {\r\n    //     inputEl.value = savedValue;\r\n    //     pEl.textContent = `이전 실행 때의 마지막 값 : ${savedValue}`;\r\n    // }\r\n\r\n    // inputEl.addEventListener('keyup', (event) => {\r\n    //     const value = event.currentTarget.value;\r\n\r\n    //     localStorage.setItem('input', value);\r\n    // });\r\n\r\n    // btnEl.addEventListener('click', () => {\r\n    //     localStorage.clear();\r\n    //     inputEl.value = '';\r\n    // }); \r\n\r\n\r\n    // ---- 면접 때 자주 물어보는 것 ----\r\n    // 1. 변수 호이스팅, TDZ (Temporal Dead Zone)\r\n    // 변수 선언 var, let, const \r\n    // - 선언 단계 -> 초기화 -> 할당\r\n\r\n    // 1-2 변수 활용\r\n    // - 한 번 선언한 변수는 다시 선언할 수 있다? \r\n    // let과 const는 못 함. var는 가능함.\r\n\r\n    // - 선언하기 이전에 호출 가능하다? 가능.\r\n\r\n    // {\r\n    //     console.log(number);\r\n    //     var number = 50;\r\n\r\n    //     console.log(number2);\r\n    //     let number2 = 100;\r\n\r\n    //     console.log(number3);\r\n    //     const number3 = 100;\r\n    // }\r\n\r\n    // - 호이스팅 : 스코프 내부에서 변수 선언은 최상위에 선언된 것처럼 실행(TDZ)\r\n\r\n    // - let도 호이스팅이 된다. \r\n    // {\r\n    // let age = 100;\r\n    // function test(){\r\n    //     console.log(age);\r\n    //     let age = 50;\r\n    //     }\r\n    // }\r\n    // test();\r\n\r\n    // const test2 = function() {\r\n    //     console.log('hahaha!!!');\r\n    // }\r\n\r\n\r\n    // 1-3 스코프\r\n    // - var : 함수 스코프\r\n    // - let, const : 블록 스코프 \r\n    // if, for, forEach, while...\r\n\r\n    // 2. 생성자 함수\r\n    // 2-1 객체 리터럴과 생성자 함수\r\n    // - 객체의 정의는 객체 리터럴과 생성자 함수로 정의\r\n    // - 일반적으로 객체는 블록을 사용한다.\r\n    // - 생성자 함수는 new 연산자를 사용\r\n    // - 생성자 함수의 첫 글자는 대문자로 사용\r\n    // - 생성자 함수 내부에 this 키워드를 사용\r\n\r\n    // 3. Object methods와 Computed property\r\n    // 3-1 Computed property\r\n    // - 객체 내부에서 키 대신 변수 내에 할당된 값으로 대체\r\n    // - 연산된 결과를 키로 지정하여 사용도 가능\r\n\r\n    // let a = 'firstName';\r\n\r\n    // let obj = {\r\n    //     name : 'Gilldong',\r\n    //     [a] : 'Mallsoon',\r\n    //     [3 + 6] : 'Soonhe'\r\n    // }\r\n    // console.log(obj);\r\n\r\n    // - 어떤 내용이 키로 들어올지 모르는 상황\r\n    // function makeObject(key, value) {\r\n    //     return {\r\n    //         [key] : value\r\n    //     }\r\n    // };\r\n\r\n    // const object = makeObject('familyName', 'Hong');\r\n\r\n    // console.log(obj);\r\n\r\n    // const nameObject = makeObject('familyName', 'Hong');\r\n    // console.log(nameObject);\r\n\r\n    // const nameObject1 = makeObject('familyName', 'Kim');\r\n    // console.log(nameObject1);\r\n\r\n\r\n\r\n    // 3-2 Object methods\r\n    // 3-2-1 Object.assign()\r\n    // - 객체를 복제하여 사용하고자 할 때\r\n    // - 객체의 원본은 훼손하지 않는다.\r\n\r\n    // const newObject = nameObject;\r\n\r\n    // console.log(newObject);\r\n    // newObject.address = 'Seoul';\r\n    // console.log(newObject);\r\n    // console.log(nameObject);\r\n\r\n    // const newObj = Object.assign({}, nameObject);\r\n    // console.log(newObj);\r\n    // newObj.lastName = 'Gilldong'\r\n    // console.log(newObject);\r\n\r\n\r\n    // const newNameObject = Object.assign({gender : 'm'}, nameObject, nameObject1);\r\n\r\n    // console.log(newNameObject);\r\n\r\n\r\n    // 3-2-2 Object.keys();\r\n    // - 객체의 키를 배열로 반환\r\n    const objArray = Object.keys(newNameObject);\r\n    console.log(objArray);\r\n\r\n    // 3-2-3 Object.values()\r\n    // - 객체의 값을 배열로 반환\r\n    \r\n    const objArrayValues = Object.values(newNameObject);\r\n    console.log(objArrayValues);\r\n\r\n    // 3-2-4 Object.entries()\r\n    // - 객체의 키와 값을 배열로 반환\r\n\r\n    const objectArrayKeyValues = Object.entries(newNameObject);\r\n    console.log(objectArrayKeyValues[0][0][0]);\r\n\r\n    // 3-2-5 Object.fromEntries()\r\n    // - 배열을 객체의 키와 값으로 반환\r\n\r\n    const arrayObject = Object.fromEntries(objectArrayKeyValues);\r\n    console.log(arrayObject);\r\n\r\n\r\n});\r\n\r\n"]}