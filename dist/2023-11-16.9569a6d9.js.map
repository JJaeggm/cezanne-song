{"version":3,"sources":["js/2023-11-16.js"],"names":["document","addEventListener","num1","num2","console","log","parseInt","num3","num4","parseFloat","Math","random","result","floor","result2","max","result3","min","window","e","innerHeight","outerHeight","abs","pow","sqrt"],"mappings":"AAAA,YAAY;;AAEZA,QAAQ,CAACC,gBAAgB,CAAC,kBAAkB,EAAE,YAAW;EAEzD;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;;EAGA;EACA;EACA;EACA;;EAEA;EACA;;EAGA;EACA;EACA;EACA;;EAEA;;EAIA;EACA;;EAEA;;EAGA;;EAGA,IAAMC,IAAI,GAAG,MAAM;EACnB,IAAMC,IAAI,GAAG,KAAK;EAElBC,OAAO,CAACC,GAAG,CAACC,QAAQ,CAACJ,IAAI,CAAC,CAAC;EAC3BE,OAAO,CAACC,GAAG,CAACC,QAAQ,CAACH,IAAI,CAAC,CAAC;EAC3BC,OAAO,CAACC,GAAG,CAACC,QAAQ,CAACH,IAAI,EAAE,EAAE,CAAC,CAAC;;EAE/B;EACA;;EAEA,IAAMI,IAAI,GAAG,QAAQ;EACrB,IAAMC,IAAI,GAAG,OAAO;EACpBJ,OAAO,CAACC,GAAG,CAACI,UAAU,CAACF,IAAI,CAAC,CAAC;EAC7BH,OAAO,CAACC,GAAG,CAACI,UAAU,CAACD,IAAI,CAAC,CAAC;;EAE7B;EACA;;EAEAJ,OAAO,CAACC,GAAG,CAACK,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC;EAC1BP,OAAO,CAACC,GAAG,CAACK,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC;EAC1BP,OAAO,CAACC,GAAG,CAACK,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC;EAC1BP,OAAO,CAACC,GAAG,CAACK,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC;EAC1BP,OAAO,CAACC,GAAG,CAACK,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC;EAC1BP,OAAO,CAACC,GAAG,CAACK,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC;;EAE1B;EACA,IAAMC,MAAM,GAAGF,IAAI,CAACG,KAAK,CAACH,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC;;EAGlD;EACA;;EAEA,IAAMG,OAAO,GAAGJ,IAAI,CAACK,GAAG,CAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,GAAG,CAAC;EACzC,IAAMC,OAAO,GAAGN,IAAI,CAACO,GAAG,CAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,GAAG,CAAC;EAEzCb,OAAO,CAACC,GAAG,CAACS,OAAO,EAAEE,OAAO,CAAC;EAE7BE,MAAM,CAACjB,gBAAgB,CAAC,QAAQ,EAAE,UAACkB,CAAC,EAAK;IACrCf,OAAO,CAACC,GAAG,CAACa,MAAM,CAACE,WAAW,CAAC;IAC/BhB,OAAO,CAACC,GAAG,CAACa,MAAM,CAACG,WAAW,CAAC;EACnC,CAAC,CAAC;;EAGF;;EAEAjB,OAAO,CAACC,GAAG,CAACK,IAAI,CAACY,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAC3BlB,OAAO,CAACC,GAAG,CAACK,IAAI,CAACa,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;EAC9BnB,OAAO,CAACC,GAAG,CAACK,IAAI,CAACc,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AAG5B,CAAC,CAAC","file":"2023-11-16.9569a6d9.js","sourceRoot":"..","sourcesContent":["'use strict';\r\n\r\ndocument.addEventListener('DOMContentLoaded', function() {\r\n\r\n//  // 4. 심볼 (Symbol)\r\n//  // 4-1 property key\r\n//  // - 키와 값은 문자형이나 숫자형으로 지정이 가능\r\n//  // - 접근할 때도 문자열로 접근이 가능\r\n\r\n//  const obj = {\r\n//     1 : '1입니다',\r\n//     false : '거짓'\r\n//  }\r\n\r\n//  console.log(Object.keys(obj));\r\n\r\n//  // 4-2 Symbol\r\n//  // - 유일한 식별자로 지정할 때 사용\r\n//  // - 동일한 값이 반환되지 않는다.\r\n//  // - 선언할 때마다 다른 값으로 반환\r\n \r\n//  const a = Symbol();\r\n//  const b = Symbol();\r\n//  console.log(a,b);\r\n//  console.log(a===b);\r\n\r\n//  // - 심볼은 유일한 값이 보장된다.\r\n//  // - 참조 문자열을 넣어도 심볼에는 영향을 미치지 않는다.\r\n//  // - 내부에 문자열은 참조값, 설명글\r\n//  const aa = symbol('event');\r\n//  const bb = symbol('event');\r\n\r\n//  console.log(aa, bb)\r\n//  console.log(aa==bb)\r\n//  console.log(aa===bb)\r\n\r\n//  // 4-2-1 Symbol을 객체의 키로 사용\r\n//  // - object methods -> keys, values, entries, fromEntries\r\n//  // - Symbol은 건너 뛰고 저장\r\n//  const id = Symbol('id')\r\n//  const object = {\r\n//     name : 'Mike',\r\n//     age : 25,\r\n//     [id] : 'myid'\r\n//  }\r\n\r\n//  console.log(object);\r\n//  console.log(Object.keys(object));\r\n\r\n// // 4-2-2 전역 Symbol\r\n// // - Symbol은 같은 이름이라 하더라도 전혀 다른 객체이다.\r\n// // - Symbol.for() 하나를 생성한 뒤 키를 통해 같은 심볼을 공유\r\n// // - 이름이 같으면 같은 객체로 지정할 때가 있다.\r\n// // - 하나의 심볼만 보장 받을 수 있다. 없으면 만들고 있으면 가져오기 때문\r\n\r\n// const id1 = Symbol.for('id');\r\n// const id2 = Symbol.for('id');\r\n\r\n// console.log(id1 === id2);\r\n\r\n// // 숨겨진 심볼을 보려면\r\n// console.clear();\r\n// console.log(object);\r\n// console.log(Object.getOwnPropertySymbols(object));\r\n\r\n\r\n// 5. Number와 Math\r\n// 5-1 toStriong()\r\n// - 숫자와 수학에 대한 자료형\r\n// - 10진수 -> 2진수, 8진수, 16진수 반환\r\n\r\n// const num = 10;\r\n// console.log(num.toString(16));\r\n\r\n\r\n// 5-6 소수점 자릿수 표현\r\n// - 요구사항 : 소수점 둘째자리까지 표현(셋째 자리 반올림)\r\n// let userfloat = 30.12345;\r\n// let convert = Math.round((userfloat*100)/100);\r\n\r\n// console.log(convert);\r\n\r\n\r\n\r\n// 5-6 ?\r\n// - NaN인지 여부를 판단할 때 사용\r\n\r\n// let number = Number('x')\r\n\r\n\r\n// 문자열을 숫자로 반환\r\n\r\n\r\nconst num1 = '10px';\r\nconst num2 = 'ff3';\r\n\r\nconsole.log(parseInt(num1));\r\nconsole.log(parseInt(num2));\r\nconsole.log(parseInt(num2, 16));\r\n\r\n// 5-8 parseFloat()\r\n// - parseInt와 동일하지만 부동소수점으로 반환\r\n\r\nconst num3 = '10.55%';\r\nconst num4 = 'f5.55';\r\nconsole.log(parseFloat(num3));\r\nconsole.log(parseFloat(num4));\r\n\r\n// 5-9 Math.random()\r\n// - 0 ~ 1 까지의 무작위 숫자를 생성\r\n\r\nconsole.log(Math.random());\r\nconsole.log(Math.random());\r\nconsole.log(Math.random());\r\nconsole.log(Math.random());\r\nconsole.log(Math.random());\r\nconsole.log(Math.random());\r\n\r\n// - 1부터 100까지의 임의 숫자를 출력\r\nconst result = Math.floor(Math.random() * 100) + 1;\r\n\r\n\r\n// 5-10 Math.max(), Math.min()\r\n// - 최대값, 최소값\r\n\r\nconst result2 = Math.max(1,4,50,100,-500);\r\nconst result3 = Math.min(1,4,50,100,-500);\r\n\r\nconsole.log(result2, result3);\r\n\r\nwindow.addEventListener('resize', (e) => {\r\n    console.log(window.innerHeight);\r\n    console.log(window.outerHeight);\r\n})\r\n\r\n\r\n// 5-11 기타 메소드\r\n\r\nconsole.log(Math.abs(-1)); // 절대값\r\nconsole.log(Math.pow(2, 10)); // 거듭제곱값\r\nconsole.log(Math.sqrt(16)); // 루트 값\r\n\r\n\r\n});\r\n\r\n\r\n\r\n"]}